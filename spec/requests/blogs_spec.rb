# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/blogs', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Blog. As you add validations to Blog, be sure to
  # adjust the attributes here as well.

  describe 'GET /index' do
    it '投稿一覧のページが出力される' do
      blog = Blog.new(title: 'Test Blog', category: 'hobby', content: 'Lorem ipsum')
      blog.save!
      get blogs_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it '投稿詳細ページが出力される' do
      blog = Blog.new(title: 'Test Blog', category: 'tech', content: 'Lorem ipsum')
      blog.save!
      get blog_url(blog)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it '新規投稿ページが出力される' do
      get new_blog_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it '投稿の編集ページが出力される' do
      blog = Blog.new(title: 'Demo Blog', category: 'other', content: 'Lorem ipsum')
      blog.save!
      get edit_blog_url(blog)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context '正しいパラメータが渡された場合' do
      it '新しい投稿が作成される' do
        expect do
          post blogs_url, params: { blog: { title: 'Test Blog', category: 'hobby', content: 'Lorem ipsum' } }
        end.to change(Blog, :count).by(1)
      end

      it '作成された投稿のページにリダイレクトされる' do
        post blogs_url, params: { blog: { title: 'Test Blog', category: 'hobby', content: 'Lorem ipsum' } }
        expect(response).to redirect_to(blog_url(Blog.last))
      end
    end

    context '無効なパラメータが渡された場合' do
      it '新しい投稿が作成されない' do
        expect do
          post blogs_url, params: { blog: { title: '', category: 'hobby', content: 'Lorem ipsum' } }
        end.to change(Blog, :count).by(0)
      end

      it '422エラーを返すこと (つまり、newテンプレートを表示すること)' do
        post blogs_url, params: { blog: { title: '', category: 'hobby', content: 'Lorem ipsum' } }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context '有効なパラメータの場合' do
      it 'ブログが更新されること' do
        blog = Blog.new(title: 'Test Blog', category: 'hobby', content: 'Lorem ipsum')
        blog.save!
        patch blog_url(blog), params: { blog: { title: 'Demo Blog', category: 'other', content: 'Lorem ipsum2' } }
        blog.reload
        expect(blog.reload.title).to eq 'Demo Blog'
        expect(blog.reload.category).to eq 'other'
        expect(blog.reload.content).to eq 'Lorem ipsum2'
      end

      it 'ブログにリダイレクトすること' do
        blog = Blog.new(title: 'Test Blog', category: 'hobby', content: 'Lorem ipsum')
        blog.save!
        patch blog_url(blog), params: { blog: { title: 'Demo Blog', category: 'other', content: 'Lorem ipsum2' } }
        blog.reload
        expect(response).to redirect_to(blog_url(blog))
      end
    end

    context '無効なパラメータの場合' do
      it '422ステータスを返すこと（すなわち、編集テンプレートを表示すること）' do
        blog = Blog.new(title: 'Test Blog', category: 'hobby', content: 'Lorem ipsum')
        blog.save!
        patch blog_url(blog), params: { blog: { title: '', category: 'other', content: 'Lorem ipsum' } }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it '指定されたブログを削除すること' do
      blog = Blog.new(title: 'Test Blog', category: 'hobby', content: 'Lorem ipsum')
      blog.save!
      expect do
        delete blog_url(blog)
      end.to change(Blog, :count).by(-1)
    end

    it 'ブログ一覧にリダイレクトすること' do
      blog = Blog.new(title: 'Test Blog', category: 'hobby', content: 'Lorem ipsum')
      blog.save!
      delete blog_url(blog)
      expect(response).to redirect_to(blogs_url)
    end
  end
end
